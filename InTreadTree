typedef struct TreadNode{
  ElemType data;
  struct ThreadNode * lchild,*rchild;
  int ltag,rtag;
}ThreadNode,* ThreadTree;

void InThread(ThreadTree &p,ThreadTree *pre){
//中序遍历对二叉树的线索化
  if(p!=NULL){
    InThread(p->lchild,pre);
    if(p->lchild==NULL){
      p->lchild=pre;
      p->ltag=1;
    }
    if(pre!=NULL&&pre->rchild==NULL){
      pre->rchild=p;
      pre->rtag=1;
    }
    pre=p;
    InThread(p->rchild,pre);
  }//if(p!=NULL)
}

void CreateInThread(ThreadTree T){
//中序遍历建立中序线索二叉树
  ThreadTree pre=NULL;
  if(T){
    InTread(T,pre);
    pre->rchild=NULL;
    pre->rtag=1;
  }
}

ThreadNode *FirstNode(ThreadNode *p){
//中序线索二叉树中中序序列下的第一个结点
  while(!p->ltag) p=p->lchild;
  return p;
}

ThreadNode *NextNode(ThreadNode *p){
//中序线索二叉树中结点p的中序序列下的后继
  if(!p->rtag)  return FirstNode(p->rchild);
  else return p->rchild;
}

ThreadNode *LastNode(ThreadNode *p){
//中序线索二叉树中中序序列下的最后一个结点
  while(!p->rtag) p=p->rchild;
  return p;
}

ThreadNode *PreNode(ThreadNode *p){
//中序线索二叉树中结点p的中序序列下的前驱
  if(!p->ltag) return LastNode(p->lchild);
  else return p->lchild;
}

void InOrder(ThreadNode *T){
//不含头结点的中序线索二叉树的中序遍历
  for(ThreadNode *p=FirstNode(T);p!=NULL;p=NextNode(p))
    visit(p);
}
